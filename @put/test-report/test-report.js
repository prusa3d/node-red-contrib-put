module.exports = function(RED) {
  'use strict';

  const mqtt = require('../../put-mqtt/mqtt.js');


  function PutTestReportNode(n){
    RED.nodes.createNode(this, n);
    const node = this;
    node.topic = n.topic;
    node.mqtt = mqtt.get();


    node.on('input', function(msg){
      const context = node.context();
      const offline_mode = context.global.get('offline_mode');
      // const debug_mode = context.global.get('debug_mode');
      const tester_id = context.global.get('tester_id');
      const tester = node.topic || context.global.get('tester');

      if(offline_mode){
        node.send([null, msg]);

      }else{
        if(typeof(msg.payload) != 'object'){
          node.error('msg.payload is not an object', msg);
          return;

        }

        const payload = {
          qr: msg.qr || 'N/A',
          err_msg: '',
          err_code: 0,
          test_mode: 0,
          test_result: 1,
          ...msg.payload,
          timestamp: (new Date().getTime()),
          tid: tester_id,
          // msg_id is generated by mqtt.request(...)
        };
        // Object.assign(payload, msg.payload);
        mqtt.sanitize(payload);

        // node.mqtt.root = 'prusa-debug/prusaqc/auto-ack';
        mqtt.request(`${tester.toLowerCase()}/${tester_id}/test_report`, payload, function(err, msgout){
          msg.payload = msgout;
          if(err){
            node.send([msg, null]);

          }else{
            node.send([null, msg]);

          }

        }, node, true);

      }

    });


    node.on('close', function(done){
      if(mqtt){
        mqtt.close(done);
      }else{
        done();
      }
    });

  }
  RED.nodes.registerType('put test report', PutTestReportNode);

}
